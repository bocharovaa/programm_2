Для обратной связи с сервером пришлось использовать SSE

Смысл в том, что мы подписываемся на события, генерируемые сервером. На клиенте эти события обрабатываются. В лабораторных в коде используется wcf, где такие штуки внутри
реализованы, поэтому от нас требуется только описать коллбэки, которые будут обрабатывать события. В питоне такого из коробки нет.

В сервере добавлен endpoint /api/services/subscribe/. Он просто регистриует слушатель, которому будут приходить события. В эндпоинтах, которые обрабатывают наши
запросы по услугам используется метод publish, который отправляет события.

Listener просто подписывается на события и выводит их на консоль

Client также отправляет запросы. Я только объединила отправку get и post запросов в один скрипт.

Файл ssePublisher содержит класс Publisher, у которого используется метод publish() для отправки событий.

Чтобы все корректно работало, нужно открыть 3 терминала. В первом запустить server.py и дождаться, чтобы все отработало.
Во втором терминале запустить listener.py (Он иногда может падать, нужно просто еще раз запустить)
В третьем терминале запустить client.py и отправлять запросы.

В сервере для имитации бурной деятельности будут просто отправляться сообщения типа "proccessing ... 10 %". 
Т.е. мы отправляем запрос, ждем пока сервер все обработает, получаем данные. Эти сообщения будут отображаться в окне слушателя.
